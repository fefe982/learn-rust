// https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign/
// 2071. Maximum Number of Tasks You Can Assign
pub struct Solution;
impl Solution {
    fn assign(task: &[i32], mut workers: std::collections::BTreeMap<i32, i32>, mut pills: i32, strength: i32) -> bool {
        for &t in task.iter().rev() {
            if let Some((&w, &c)) = workers.range(t..).next() {
                if c == 1 {
                    workers.remove(&w);
                } else {
                    workers.insert(w, c - 1);
                }
            } else if pills == 0 {
                return false;
            } else {
                pills -= 1;
                if let Some((&w, &c)) = workers.range(t - strength..).next() {
                    if c == 1 {
                        workers.remove(&w);
                    } else {
                        workers.insert(w, c - 1);
                    }
                } else {
                    return false;
                }
            }
        }
        true
    }
    fn count_iter<I: IntoIterator<Item = i32>>(iter: I) -> std::collections::BTreeMap<i32, i32> {
        let mut m = std::collections::BTreeMap::new();
        iter.into_iter().for_each(|x| *m.entry(x).or_insert(0) += 1);
        m
    }
    pub fn max_task_assign(tasks: Vec<i32>, workers: Vec<i32>, pills: i32, strength: i32) -> i32 {
        let mut low = 0;
        let mut high = tasks.len().min(workers.len());
        let mut tasks = tasks;
        let mut workers = workers;
        let nw = workers.len();
        tasks.sort_unstable();
        workers.sort_unstable();
        if Self::assign(
            &tasks[..high],
            Self::count_iter(workers[nw - high..].iter().cloned()),
            pills,
            strength,
        ) {
            return high as i32;
        }
        while low + 1 < high {
            let mid = (low + high) / 2;
            if Self::assign(
                &tasks[..mid],
                Self::count_iter(workers[nw - mid..].iter().cloned()),
                pills,
                strength,
            ) {
                low = mid;
            } else {
                high = mid;
            }
        }
        low as i32
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_max_task_assign() {
        assert_eq!(
            Solution::max_task_assign(
                vec![
                    1943, 2068, 4077, 7832, 8061, 6939, 6263, 8917, 8008, 5348, 8837, 4753, 4607, 7638, 9000, 7222,
                    4552, 1123, 9225, 6896, 4154, 6303, 3186, 2325, 9994, 5855, 8851, 7377, 1930, 1187, 5094, 2689,
                    8852, 1507, 1567, 9575, 1193, 1557, 8840, 9075, 5032, 3642, 6917, 7968, 5310, 2315, 7516, 4776,
                    3091, 7027, 1788, 2007, 2651, 6112, 4264, 5644, 3585, 9408, 7410, 9605, 8151, 1538, 6905, 6759,
                    4518, 3444, 5036, 1589, 3902, 3037, 1468, 9179, 3000, 5339, 6805, 7394, 9418, 9262, 2888, 4708,
                    3402, 5554, 8714, 7393, 2848, 5946, 9808, 4301, 6675, 8564, 6300, 4359, 9506, 1946, 9673, 7412,
                    1164, 2986, 2198, 5144, 3763, 4782, 8835, 6994, 8035, 3332, 2342, 5243, 3150, 9084, 6519, 9798,
                    7682, 9919, 7473, 7686, 9978, 8092, 9897, 3985, 9874, 5842, 9740, 2145, 2426, 7069, 8963, 9250,
                    4142, 9434, 1895, 6559, 3233, 8431, 6278, 6748, 7305, 4359, 2144, 8009, 4890, 6486, 7464, 8645,
                    1704, 5915, 9586, 1394, 7504, 2124, 3150, 2051, 5026, 7612, 3715, 5757, 4355, 6394, 3202, 2777,
                    3949, 2349, 7398, 3029, 3081, 5116, 5078, 8048, 9934, 4348, 8518, 5201, 1203, 7935, 5006, 6388,
                    8680, 3427, 6048, 1957, 4026, 4618, 4080
                ],
                vec![
                    875, 2347, 939, 3664, 3926, 4555, 1947, 4406, 4601, 3502, 4964, 1307, 4232, 2968, 4572, 3139, 2788,
                    1847, 1208, 2019, 4184, 1664, 1747, 3690, 4333, 891, 686, 1959, 2218, 4972, 806, 741, 1490, 4529,
                    2909, 925, 2040, 1234, 1264, 1135, 3640, 1455, 2933, 3699, 2856, 3074, 4579, 2458, 2090, 833, 4140,
                    4534, 2336, 4363, 1948, 4546, 4155, 3735, 3577, 2780, 4874, 1747, 4844, 3482, 3053, 3534, 549,
                    4500, 2237, 2128, 1554, 3210, 4161, 2211, 950, 3732, 2182, 1148, 4368, 4050, 1452, 1015, 3192,
                    4318, 3908, 2590, 1103, 2811, 2821, 690, 2718, 3360, 2659, 3315, 579, 3108, 2979, 3903, 4367, 1906,
                    4964, 889, 4803, 825, 2270, 4794, 4825, 4485, 4461, 1639, 3857, 1330, 3169, 2425, 3694, 1980, 2268,
                    3002, 2177, 3225, 2499, 2517, 1916, 2844, 760, 2167, 1786, 3179, 3222, 1432, 3775, 4747, 1764, 690,
                    3223, 4684, 890, 2701, 1045, 3034, 1381, 1011, 2150, 4798, 2247, 1334, 3058, 934, 2895, 1484, 2784,
                    3341, 4412, 1748, 625, 2610, 3488, 4810, 669, 4275, 4929, 1014, 2104, 3111
                ],
                122,
                3131
            ),
            143
        );
        assert_eq!(
            Solution::max_task_assign(
                vec![
                    5181, 2717, 7678, 7730, 5931, 8066, 2266, 5873, 3645, 6636, 3308, 2848, 2082, 7158, 5398, 4030,
                    4942, 1723, 6614, 5165, 8086, 7526, 9503, 2051, 5305, 6606, 7514, 5078, 1149, 5782, 4717, 5969,
                    4966, 1292, 4370, 3863, 4111, 1140, 2980, 5295, 5347, 8700, 2833, 6750, 2352, 7604, 6305, 2697,
                    7501, 7719, 7955, 7901, 1779, 6850, 6456, 1040, 9230, 2712, 8129, 9875, 9385, 1814, 8167, 2960,
                    9191, 3588, 7339, 2255, 5314, 2873, 3294, 5375, 6745, 5984, 9717, 4983, 2558, 8075, 7988, 6490,
                    4499, 7236, 2097, 8097, 2923, 2972, 8609, 8993, 6354, 6502, 3340, 1666, 1281, 9703, 8869, 5274,
                    8150, 5270, 3437, 3171, 7423, 5865, 1995, 7002, 8550, 9908, 7114, 8777, 1250, 5855, 3501, 9316,
                    5380, 3877
                ],
                vec![
                    2167, 4646, 1582, 1102, 2113, 1258, 4341, 3193, 3136, 4096, 3311, 1501, 3499, 1815, 1282, 4914,
                    772, 4785, 2632, 1223, 3479, 3010, 3505, 1613, 4257, 1192, 2918, 2664, 4274, 4036, 1039, 1250,
                    4713, 3443, 4514, 4117, 3400, 3825, 1782, 3552, 2386, 865, 2290, 3618, 793, 1297, 908, 2187, 3273,
                    4531, 3859, 605, 4274, 3951, 583, 1135, 2802, 3585, 727, 2359, 4011, 4071, 2035, 4775, 764, 4702,
                    2050, 3304, 3876, 3772, 4946, 4371, 1993, 4746, 1124, 1221, 1368, 831, 2337, 506, 951, 3874, 3094,
                    2744, 4258, 4704, 3229, 1015, 4876, 1893, 3098, 4464, 4189, 4201, 3986, 3673, 4126, 2424, 4280,
                    2780, 1748, 1650, 1591, 753, 3392, 2498, 835, 608, 1746, 1243, 3778, 1382, 4207, 1909, 832, 4501,
                    781, 1274, 973, 4966, 1873, 2512, 3644, 3244, 1120, 4979, 3945, 1481, 2172, 4410, 3572, 4597, 3414,
                    4306, 4714, 4047, 3239, 4557, 3226, 3273, 4997, 3374
                ],
                129,
                2075
            ),
            77
        );
        assert_eq!(Solution::max_task_assign(vec![3, 2, 1], vec![0, 3, 3], 1, 1), 3);
        assert_eq!(Solution::max_task_assign(vec![5, 4], vec![0, 0, 0], 1, 5), 1);
        assert_eq!(
            Solution::max_task_assign(vec![10, 15, 30], vec![0, 10, 10, 10, 10], 3, 10),
            2
        );
    }
}
